import { defineMiddleware } from "astro:middleware";
import { createSupabaseServerInstance } from "../db/supabase.client.ts";

// Public paths - Auth API endpoints & Server-Rendered Astro Pages
const PUBLIC_PATHS = [
  // Server-Rendered Astro Pages
  "/auth/login",
  "/auth/register",
  "/auth/forgot-password",
  "/auth/reset-password",
  // Public API endpoints (only auth endpoints)
  "/api/auth",
];

export const onRequest = defineMiddleware(async ({ locals, cookies, url, request, redirect }, next) => {
  // Create Supabase server instance
  const supabase = createSupabaseServerInstance({
    cookies,
    headers: request.headers,
  });

  // Skip auth check for public paths
  if (PUBLIC_PATHS.some((path) => url.pathname.startsWith(path))) {
    locals.supabase = supabase;
    return next();
  }

  // IMPORTANT: Always get user session first before any other operations
  console.log("Middleware: Processing request to", url.pathname);

  const {
    data: { user },
    error: userError,
  } = await supabase.auth.getUser();

  console.log("Middleware: getUser result - user:", user ? `User ${user.id}` : "null", "error:", userError);

  if (user) {
    locals.user = user;
    const { data: sessionData } = await supabase.auth.getSession();
    locals.session = sessionData.session;
    console.log("Middleware: Set locals.user for authenticated user");
  } else {
    locals.user = null;
    locals.session = null;
    // Debug: log when user is null
    console.log("Middleware: User is null, error:", userError);
  }

  // Set supabase instance in locals
  locals.supabase = supabase;

  // Temporarily disable auth protection for testing UI
  // if (!user && (url.pathname.startsWith("/buildings") || url.pathname.startsWith("/admin"))) {
  //   return redirect("/auth/login");
  // }

  // Get user role from profiles table
  let userRole = null;
  if (user) {
    try {
      const { data: profile } = await supabase.from("profiles").select("role").eq("user_id", user.id).single();

      userRole = profile?.role || null;
      // eslint-disable-next-line no-console
      console.log("Middleware: User role from profiles:", userRole);
    } catch (error) {
      // eslint-disable-next-line no-console
      console.log("Middleware: Error fetching user role:", error);
    }
  }

  // Protect admin routes based on roles
  if (url.pathname.startsWith("/admin") && userRole !== "ADMIN") {
    return new Response("Forbidden: Wymagane uprawnienia administratora.", { status: 403 });
  }

  // Protect write operations based on roles
  if (
    (url.pathname.endsWith("/new") || url.pathname.includes("/edit")) &&
    userRole !== "WRITE" &&
    userRole !== "ADMIN"
  ) {
    return new Response("Forbidden: Wymagane uprawnienia do zapisu.", { status: 403 });
  }

  return next();
});
