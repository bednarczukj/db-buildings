import type { BuildingDTO } from "../../types";
import type { CreateBuildingInput } from "../schemas/buildingSchemas";

/**
 * Mock data for testing building-related functionality
 *
 * This file contains sample building records that can be used for:
 * - Unit testing
 * - Integration testing
 * - Development and prototyping
 * - UI component testing
 */

/**
 * Sample building in Warsaw (Mazowieckie)
 * Can be used for testing GET /api/v1/buildings/:id
 * UUID: 550e8400-e29b-41d4-a716-446655440001
 */
export const mockBuildingWarsaw: Partial<BuildingDTO> = {
  id: "550e8400-e29b-41d4-a716-446655440001",
  voivodeship_code: "14",
  voivodeship_name: "Mazowieckie",
  district_code: "1417",
  district_name: "Powiat testowy",
  community_code: "1417052",
  community_name: "Gmina testowa",
  city_code: "0674922",
  city_name: "Miejscowość testowa",
  city_part_code: null,
  city_part_name: null,
  city_district_code: null,
  city_district_name: null,
  street_code: "10270",
  street_name: "Marszałkowska",
  building_number: "1",
  post_code: "00-001",
  latitude: 52.2297,
  longitude: 21.0122,
  location: null, // PostGIS geography - auto-generated by trigger
  provider_id: 1,
  status: "active",
  created_at: "2024-01-15T10:30:00Z",
  updated_at: "2024-01-15T10:30:00Z",
  created_by: "00000000-0000-0000-0000-000000000000",
  updated_by: "00000000-0000-0000-0000-000000000000",
};

/**
 * Sample building in Kraków (Małopolskie)
 * Can be used for testing GET /api/v1/buildings/:id
 * UUID: 550e8400-e29b-41d4-a716-446655440002
 */
export const mockBuildingKrakow: Partial<BuildingDTO> = {
  id: "550e8400-e29b-41d4-a716-446655440002",
  voivodeship_code: "12",
  voivodeship_name: "Małopolskie",
  district_code: "1261",
  district_name: "Kraków",
  community_code: "1261011",
  community_name: "Kraków",
  city_code: "0950867",
  city_name: "Kraków",
  city_part_code: null,
  city_part_name: null,
  city_district_code: null,
  city_district_name: null,
  street_code: "12345",
  street_name: "Floriańska",
  building_number: "15A",
  post_code: "31-019",
  latitude: 50.0647,
  longitude: 19.945,
  location: null,
  provider_id: 2,
  status: "active",
  created_at: "2024-02-10T14:20:00Z",
  updated_at: "2024-02-10T14:20:00Z",
  created_by: "00000000-0000-0000-0000-000000000000",
  updated_by: "00000000-0000-0000-0000-000000000000",
};

/**
 * Sample deleted building (Gdańsk - Pomorskie)
 * UUID: 550e8400-e29b-41d4-a716-446655440003
 */
export const mockBuildingDeleted: Partial<BuildingDTO> = {
  id: "550e8400-e29b-41d4-a716-446655440003",
  voivodeship_code: "30",
  voivodeship_name: "Pomorskie",
  district_code: "3063",
  district_name: "Gdańsk",
  community_code: "3063011",
  community_name: "Gdańsk",
  city_code: "0945145",
  city_name: "Gdańsk",
  city_part_code: null,
  city_part_name: null,
  city_district_code: null,
  city_district_name: null,
  street_code: "67890",
  street_name: "Długa",
  building_number: "42",
  post_code: "80-001",
  latitude: 54.352,
  longitude: 18.6466,
  location: null,
  provider_id: 1,
  status: "deleted",
  created_at: "2023-11-05T09:00:00Z",
  updated_at: "2024-03-01T16:45:00Z",
  created_by: "00000000-0000-0000-0000-000000000000",
  updated_by: "00000000-0000-0000-0000-000000000000",
};

/**
 * Array of all mock buildings
 */
export const mockBuildings: Partial<BuildingDTO>[] = [mockBuildingWarsaw, mockBuildingKrakow, mockBuildingDeleted];

/**
 * Generate multiple mock buildings for pagination testing
 *
 * @param count - Number of buildings to generate
 * @param baseUuidSuffix - Starting suffix for UUID generation (default: 1000)
 * @returns Array of mock buildings
 */
export function generateMockBuildings(count: number, baseUuidSuffix = 1000): Partial<BuildingDTO>[] {
  return Array.from({ length: count }, (_, index) => {
    const lng = 21.0122 + index * 0.001;
    const lat = 52.2297 + index * 0.001;
    const suffix = (baseUuidSuffix + index).toString().padStart(12, "0");
    return {
      id: `550e8400-e29b-41d4-a716-${suffix}`,
      voivodeship_code: "14",
      voivodeship_name: "Mazowieckie",
      district_code: "1417",
      district_name: "Powiat testowy",
      community_code: "1417052",
      community_name: "Gmina testowa",
      city_code: "0674922",
      city_name: "Miejscowość testowa",
      city_part_code: null,
      city_part_name: null,
      city_district_code: null,
      city_district_name: null,
      street_code: `${10000 + index}`,
      street_name: "Marszałkowska",
      building_number: `${index + 1}`,
      post_code: "00-001",
      latitude: lat,
      longitude: lng,
      location: null,
      provider_id: (index % 3) + 1,
      status: index % 10 === 0 ? "deleted" : "active",
      created_at: new Date(2024, 0, index + 1).toISOString(),
      updated_at: new Date(2024, 0, index + 1).toISOString(),
      created_by: "00000000-0000-0000-0000-000000000000",
      updated_by: "00000000-0000-0000-0000-000000000000",
    };
  });
}

/**
 * Mock paginated response for buildings list
 */
export const mockBuildingsListResponse = {
  data: mockBuildings,
  page: 1,
  pageSize: 10,
  total: 3,
};

/**
 * Mock empty response (no buildings found)
 */
export const mockEmptyBuildingsResponse = {
  data: [],
  page: 1,
  pageSize: 10,
  total: 0,
};

/**
 * Mock response with pagination metadata
 */
export function createMockPaginatedResponse(
  buildings: BuildingDTO[],
  page = 1,
  pageSize = 10,
  total: number = buildings.length
) {
  return {
    data: buildings,
    page,
    pageSize,
    total,
  };
}

/**
 * Mock payloads for POST /api/v1/buildings
 */

/**
 * Valid payload for creating a building in Warsaw
 */
export const mockCreateBuildingPayloadWarsaw: CreateBuildingInput = {
  voivodeship_code: "14",
  district_code: "1417",
  community_code: "1417052",
  city_code: "0674922",
  street_code: "10270",
  building_number: "42A",
  post_code: "00-042",
  location: {
    type: "Point",
    coordinates: [21.0122, 52.2297],
  },
  provider_id: 1,
};

/**
 * Valid payload for creating a building in Kraków with city district
 */
export const mockCreateBuildingPayloadKrakow: CreateBuildingInput = {
  voivodeship_code: "12",
  district_code: "1261",
  community_code: "1261011",
  city_code: "0950867",
  city_district_code: "0950001",
  street_code: "12345",
  building_number: "15",
  post_code: "31-015",
  location: {
    type: "Point",
    coordinates: [19.945, 50.0647],
  },
  provider_id: 2,
};

/**
 * Invalid payload - missing required fields
 */
export const mockInvalidPayloadMissingFields = {
  voivodeship_code: "14",
  district_code: "1417",
  building_number: "1",
  // Missing: community_code, city_code, street_code, location, provider_id
};

/**
 * Invalid payload - coordinates out of Poland bounds
 */
export const mockInvalidPayloadOutOfBounds: CreateBuildingInput = {
  voivodeship_code: "14",
  district_code: "1417",
  community_code: "1417052",
  city_code: "0674922",
  street_code: "10270",
  building_number: "999",
  post_code: "00-999",
  location: {
    type: "Point",
    coordinates: [100.0, 100.0], // Invalid coordinates
  },
  provider_id: 1,
};

/**
 * Invalid payload - wrong TERYT code length
 */
export const mockInvalidPayloadWrongCodeLength = {
  voivodeship_code: "123", // Should be 2 digits
  district_code: "1417052", // Should be 4 digits
  community_code: "1417052",
  city_code: "0674922",
  street_code: "10270",
  building_number: "1",
  post_code: "00-001",
  location: {
    type: "Point",
    coordinates: [21.0122, 52.2297],
  },
  provider_id: 1,
};

/**
 * Invalid payload - invalid GeoJSON format
 */
export const mockInvalidPayloadBadGeoJSON = {
  voivodeship_code: "14",
  district_code: "1417",
  community_code: "1417052",
  city_code: "0674922",
  street_code: "10270",
  building_number: "1",
  post_code: "00-001",
  location: {
    type: "Polygon", // Should be "Point"
    coordinates: [21.0122, 52.2297],
  },
  provider_id: 1,
};

/**
 * Payload with non-existent voivodeship code (for 404 testing)
 */
export const mockPayloadNonExistentVoivodeship: CreateBuildingInput = {
  voivodeship_code: "99",
  district_code: "1417",
  community_code: "1417052",
  city_code: "0674922",
  street_code: "10270",
  building_number: "1",
  post_code: "00-001",
  location: {
    type: "Point",
    coordinates: [21.0122, 52.2297],
  },
  provider_id: 1,
};

/**
 * Payload with non-existent provider_id (for 404 testing)
 */
export const mockPayloadNonExistentProvider: CreateBuildingInput = {
  voivodeship_code: "14",
  district_code: "1417",
  community_code: "1417052",
  city_code: "0674922",
  street_code: "10270",
  building_number: "1",
  post_code: "00-001",
  location: {
    type: "Point",
    coordinates: [21.0122, 52.2297],
  },
  provider_id: 99999,
};

/**
 * Valid payload for creating a building without street (rural area)
 */
export const mockCreateBuildingPayloadRural: CreateBuildingInput = {
  voivodeship_code: "14",
  district_code: "1417",
  community_code: "1417052",
  city_code: "0674922",
  // No street_code - optional for buildings in rural areas
  building_number: "15",
  post_code: "00-042",
  location: {
    type: "Point",
    coordinates: [21.0122, 52.2297],
  },
  provider_id: 1,
};

/**
 * Generate a random valid building payload for testing
 *
 * @param overrides - Properties to override in the generated payload
 * @returns Valid CreateBuildingInput
 */
export function generateMockCreatePayload(overrides: Partial<CreateBuildingInput> = {}): CreateBuildingInput {
  const randomNumber = Math.floor(Math.random() * 1000);
  const hasStreet = Math.random() > 0.3; // 70% chance of having a street

  return {
    voivodeship_code: "14",
    district_code: "1417",
    community_code: "1417052",
    city_code: "0674922",
    ...(hasStreet && { street_code: "10270" }), // Only include street_code sometimes
    building_number: `${randomNumber}`,
    post_code: `00-${String(randomNumber % 1000).padStart(3, "0")}`,
    location: {
      type: "Point",
      coordinates: [21.0122 + (Math.random() * 0.1 - 0.05), 52.2297 + (Math.random() * 0.1 - 0.05)],
    },
    provider_id: 1,
    ...overrides,
  };
}
